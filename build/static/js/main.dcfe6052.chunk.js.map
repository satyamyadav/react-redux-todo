{"version":3,"sources":["components/Todo.js","components/TodoList.js","store/actions/index.js","containers/VisibleTodoList.js","components/Link.js","containers/FilterLinks.js","components/Footer.js","containers/AddTodo.js","components/Title.js","containers/App.js","serviceWorker.js","store/reducers/index.js","store/index.js","index.js"],"names":["Todo","_ref","text","completed","onClick","react_default","a","createElement","className","type","TodoList","todos","onTodoClick","map","todo","index","components_Todo","Object","assign","key","VisibilityFilters","getVisibleTodos","filter","t","VisibleTodoList","connect","state","visibilityFilter","dispatch","id","Link","children","active","ownProps","Footer","FilterLinks","AddTodo","input","onSubmit","e","preventDefault","value","trim","placeholder","ref","node","Title","title","git","href","url","meta","App","style","width","components_Title","containers_AddTodo","containers_VisibleTodoList","components_Footer","Component","Boolean","window","location","hostname","match","SHOW_ALL","todoApp","combineReducers","arguments","length","undefined","action","concat","toConsumableArray","objectSpread","store","createStore","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcfe6052.chunk.js","sourcesContent":["/**\n  * Todo is a single todo item.\n    text: string is the text to show.\n    completed: boolean is whether the todo should appear crossed out.\n    onClick() is a callback to invoke when the todo is clicked.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Todo = ({ text, completed, onClick }) => (\n  <li\n    className={completed ? 'Todo-item Todo-item--done' : 'Todo-item' }\n  >\n    <span\n      className={completed ? 'Todo-check Todo-check--done' : 'Todo-check'}\n      type=\"checkbox\"\n      onClick={onClick}\n    >\n    </span>\n    {text}\n  </li>\n)\n\nTodo.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n}\n\nexport default Todo","/**\n *  TodoList is a list showing visible todos.\n    todos: Array is an array of todo items with { id, text, completed } shape.\n    onTodoClick(id: number) is a callback to invoke when a todo is clicked.\n * \n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, onTodoClick }) => (\n  <ul className=\"Todo\">\n    {todos.map((todo, index) => (\n      <Todo key={index} {...todo} onClick={() => onTodoClick(index)} />\n    ))}\n  </ul>\n)\n\nTodoList.propTypes = {\n  onTodoClick: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    // id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired,\n  })).isRequired,\n}\n\nexport default TodoList","\n/**\n * Action types\n */\n\nexport const ADD_TODO = 'ADD_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER';\n\n\n/**\n * other constants\n */\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE',\n}\n\n/**\n *  action creators\n */\n\nexport const addTodo = text => ({ type: ADD_TODO, text });\n\nexport const toggleTodo = index => ({ type: TOGGLE_TODO, index });\n\nexport const setVisibilityFilter = filter => ({ type: SET_VISIBILITY_FILTER, filter });\n\n","import { connect } from 'react-redux';\nimport { toggleTodo } from '../store/actions';\nimport TodoList from '../components/TodoList';\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos\n    case 'SHOW_COMPLETED':\n      return todos.filter(t => t.completed)\n    case 'SHOW_ACTIVE':\n      return todos.filter(t => !t.completed)\n    default:\n      return todos\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTodoClick: id => {\n      dispatch(toggleTodo(id))\n    }\n  }\n}\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodoList)\n\nexport default VisibleTodoList;","/**\n *  Link is a link with a callback.\n    onClick() is a callback to invoke when the link is clicked.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Link = ({ children, onClick, active }) => {\n  \n  return (\n    <button\n      className={active ? 'Button Button--active' : 'Button'}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  )\n};\n\nLink.propTypes = {\n  children: PropTypes.node.isRequired,\n  active: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n}\n\nexport default Link","import { connect } from 'react-redux';\nimport { setVisibilityFilter } from '../store/actions';\nimport Link from '../components/Link';\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Link)","/**\n * Footer is where we let the user change currently visible todos.\n */\n\nimport React from 'react';\nimport FilterLinks from '../containers/FilterLinks';\nimport { VisibilityFilters } from '../store/actions';\n\nconst Footer = () => (\n  <div className=\"Footer\">\n    <FilterLinks filter={VisibilityFilters.SHOW_ALL}>All </FilterLinks>\n    <FilterLinks filter={VisibilityFilters.SHOW_ACTIVE}>Active </FilterLinks>\n    <FilterLinks filter={VisibilityFilters.SHOW_COMPLETED}>Completed </FilterLinks>\n  </div>\n\n)\n\nexport default Footer","/**\n   * Sometimes it's hard to tell if some component should be a presentational component or a container. For example, sometimes form and function are really coupled together, such as in the case of this tiny component:\n\n  AddTodo is an input field with an “Add” button\n  https://redux.js.org/basics/usage-with-react#designing-other-components\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../store/actions';\n\nlet AddTodo = ({dispatch}) => {\n  let input;\n\n  return (\n    <div className=\"AddTodo\">\n      <form\n        className=\"AddTodo-form\"\n        onSubmit={\n          e => {\n            e.preventDefault();\n            if(!input.value.trim()) {\n              return\n            }\n            dispatch(addTodo(input.value))\n            input.value = ''\n          }\n        } \n      >\n        <input\n          className=\"AddTodo-input\"\n          placeholder=\"What needs to be done?   \"\n          ref={node => input = node}\n        />\n        <button type=\"submit\" className=\"Button Button--active\">\n          Add Todo\n        </button>\n      </form>\n    </div>\n  )\n}\n\nAddTodo = connect()(AddTodo)\n\nexport default AddTodo","\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Title = ({title, git}) => {\n  return (\n    <div className=\"text-center\">\n      <h1>\n        {title}\n      </h1>\n      <h5>\n        <a href={git.url}>\n          {git.title}\n        </a>\n      </h5>\n    </div>\n  )\n}\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n  git: PropTypes.objectOf({\n    url: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  })\n}\n\nexport default Title","import React, { Component } from 'react';\nimport '../components/TodoList';\nimport VisibleTodoList from './VisibleTodoList';\nimport Footer from '../components/Footer';\nimport AddTodo from './AddTodo';\nimport Title from '../components/Title';\n\nconst meta = {\n  title: 'todo',\n  git: {\n    title: 'Fork on github',\n    url: 'https://github.com/satyamyadav/react-redux-todo'\n  }\n}\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container container--center container--p5\">\n        <div style={{ width: '50%' }}>\n          <Title {...meta} />\n          <div className=\"Card\">\n            <AddTodo />\n            <VisibleTodoList />\n            <Footer />\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport { combineReducers } from 'redux';\n\nimport {\n  ADD_TODO,\n  TOGGLE_TODO,\n  SET_VISIBILITY_FILTER,\n  VisibilityFilters,\n} from '../actions'\n\nconst { SHOW_ALL } = VisibilityFilters;\n\nconst visibilityFilter = (state = SHOW_ALL, action) => {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter;\n    default:\n      return state;\n  }\n}\n\nconst todos = (state=[], action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          text: action.text,\n          completed: false,\n        }\n      ];\n    case TOGGLE_TODO:\n      return state.map((todo, index) => {\n        if(index === action.index) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          }\n        }\n        return todo;\n      });\n    default:\n      return state;\n  }\n}\n\nconst todoApp = combineReducers({\n  visibilityFilter,\n  todos,\n});\n\nexport default todoApp\n\n\n","\nimport { createStore } from 'redux';\nimport todoApp from './reducers';\n\nconst store = createStore(todoApp);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\n// import {\n//   addTodo,\n//   toggleTodo,\n//   setVisibilityFilter,\n//   VisibilityFilters,\n// } from './store/actions';\n\n// // Test store\n\n// // initial state\n\n// console.log(store.getState());\n\n// // subscribe store for watching changes\n\n// // subscribe() returns a function for unregistering the listener\n// const unsubscribe = store.subscribe(() => console.log(store.getState()))\n\n// // dispatch actions\n\n// store.dispatch(addTodo('this is first task added'));\n// store.dispatch(addTodo('second one'));\n// store.dispatch(addTodo('third added'));\n\n// store.dispatch(toggleTodo(1));\n// store.dispatch(toggleTodo(0));\n// store.dispatch(toggleTodo(1));\n\n// store.dispatch(setVisibilityFilter(VisibilityFilters.SHOW_COMPLETED));\n\n// // unsubscribe\n// unsubscribe();\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}